generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id            String    @id @default(uuid())
  email         String    @unique
  username      String    @unique
  password      String
  avatar        String?
  bio           String?   @db.Text
  status        UserStatus @default(OFFLINE)
  lastSeen      DateTime  @default(now())
  isVerified    Boolean   @default(false)
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  rooms         RoomUser[]
  messages      Message[]
  notifications Notification[]
  reactions     MessageReaction[]
  readReceipts  MessageReadReceipt[]
  blockedUsers  BlockedUser[] @relation("BlockingUser")
  blockedBy     BlockedUser[] @relation("BlockedUser")
  roomBans      RoomBan[]
  
  sentFriendRequests     Friendship[] @relation("FriendshipSender")
  receivedFriendRequests Friendship[] @relation("FriendshipReceiver")
  
  settings      UserSettings?
  
  @@index([email]) // Login único
  @@index([username]) // Busca única
  @@index([status]) // Status online/offline
  @@index([email, emailVerified]) // Login com verificação
  @@index([username, status]) // Busca de usuários online
  @@index([status, lastSeen]) // Lista de usuários ativos
  @@index([createdAt]) // Estatísticas de crescimento
  @@index([lastSeen, status]) // Cleanup de usuários inativos
  @@map("users")
}

model UserSettings {
  id                String   @id @default(uuid())
  userId            String   @unique
  
  notifyMentions    Boolean  @default(true)
  notifyReplies     Boolean  @default(true)
  notifyNewMessages Boolean  @default(true)
  soundEnabled      Boolean  @default(true)
  
  showOnlineStatus  Boolean  @default(true)
  allowDirectMessages Boolean @default(true)
  
  theme             Theme    @default(DARK)
  language          String   @default("en")
  fontSize          Int      @default(14)
  compactMode       Boolean  @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}

model Room {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  avatar      String?
  isPrivate   Boolean   @default(false)
  isDirect    Boolean   @default(false)
  maxMembers  Int       @default(0) // 0 = unlimited
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  users       RoomUser[]
  messages    Message[]
  invites     RoomInvite[]
  bans        RoomBan[]
  
  @@index([name]) // Busca por nome
  @@index([isPrivate]) // Filtro público/privado
  @@index([isPrivate, createdAt(sort: Desc)]) // Lista salas públicas recentes
  @@index([isDirect]) // Chats diretos
  @@index([name, isPrivate]) // Busca combinada
  @@index([createdAt]) // Ordenação temporal
  @@unique([name, isDirect]) // Evitar salas DM duplicadas
  @@map("rooms")
}

model RoomUser {
  id        String   @id @default(uuid())
  userId    String
  roomId    String
  role      RoomRole @default(MEMBER)
  nickname  String?
  joinedAt  DateTime @default(now())
  mutedUntil DateTime?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roomId]) // Constraint única
  @@index([userId]) // Salas do usuário
  @@index([roomId]) // Membros da sala
  @@index([roomId, role]) // Membros por role (admin, mod, etc)
  @@index([userId, joinedAt(sort: Desc)]) // Salas recentes do usuário
  @@index([roomId, joinedAt]) // Membros por ordem de entrada
  @@index([role, joinedAt]) // Moderadores/admins por data
  @@index([userId, role]) // Role do usuário em múltiplas salas
  @@map("room_users")
}

model RoomInvite {
  id        String   @id @default(uuid())
  roomId    String
  code      String   @unique @default(cuid())
  uses      Int      @default(0)
  maxUses   Int?
  expiresAt DateTime?
  createdBy String
  createdAt DateTime @default(now())
  
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@index([code]) // Busca por código único
  @@index([roomId]) // Convites da sala
  @@index([roomId, expiresAt]) // Convites válidos da sala
  @@index([expiresAt]) // Cleanup de convites expirados
  @@index([createdBy, createdAt(sort: Desc)]) // Convites criados pelo usuário
  @@map("room_invites")
}

model RoomBan {
  id        String   @id @default(uuid())
  roomId    String
  userId    String
  reason    String?
  createdAt DateTime @default(now())

  room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId]) // Constraint única
  @@index([roomId]) // Banidos da sala
  @@index([userId]) // Banimentos do usuário
  @@index([roomId, createdAt(sort: Desc)]) // Banimentos recentes da sala
  @@index([createdAt]) // Cleanup de banimentos antigos
  @@map("room_bans")
}

model Message {
  id        String    @id @default(uuid())
  content   String    @db.Text
  edited    Boolean   @default(false)
  deleted   Boolean   @default(false)
  deletedAt DateTime?
  deletedBy String?
  editHistory Json[]  @default([])
  metadata  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  userId    String
  roomId    String
  replyToId String?
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  replyTo   Message?  @relation("MessageReply", fields: [replyToId], references: [id])
  
  replies     Message[]    @relation("MessageReply")
  attachments Attachment[]
  reactions   MessageReaction[]
  readReceipts MessageReadReceipt[]
  
  @@index([roomId, createdAt(sort: Desc)]) // Lista mensagens da sala
  @@index([userId]) // Mensagens do usuário
  @@index([deleted]) // Filtro de mensagens deletadas
  @@index([roomId, deleted, createdAt(sort: Desc)]) // Mensagens ativas da sala
  @@index([userId, createdAt(sort: Desc)]) // Histórico do usuário
  @@index([roomId, userId, createdAt]) // Mensagens do usuário na sala
  @@index([replyToId]) // Threads de respostas
  @@index([deleted, createdAt]) // Cleanup de mensagens antigas
  @@index([roomId, userId, deleted]) // Verificação rápida de acesso
  @@index([createdAt]) // Ordenação global por data
  @@index([edited, updatedAt]) // Mensagens editadas
  @@map("messages")
}

model Attachment {
  id        String   @id @default(uuid())
  messageId String
  filename  String
  url       String
  mimeType  String
  size      Int
  width     Int?
  height    Int?
  duration  Int?
  createdAt DateTime @default(now())
  
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  @@index([messageId])
  @@map("attachments")
}

model MessageReaction {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId, emoji]) // Constraint única
  @@index([messageId]) // Reações da mensagem
  @@index([userId]) // Reações do usuário
  @@index([messageId, emoji]) // Contagem por emoji
  @@index([userId, createdAt(sort: Desc)]) // Histórico de reações
  @@index([emoji, createdAt]) // Emojis mais usados
  @@map("message_reactions")
}

model MessageReadReceipt {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId]) // Constraint única
  @@index([messageId]) // Receipts da mensagem
  @@index([userId]) // Receipts do usuário
  @@index([messageId, readAt]) // Ordem de leitura
  @@index([userId, readAt(sort: Desc)]) // Últimas leituras do usuário
  @@map("message_read_receipts")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  content   String?          @db.Text
  data      Json?
  read      Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, read]) // Notificações não lidas
  @@index([createdAt]) // Ordenação temporal
  @@index([userId, read, createdAt(sort: Desc)]) // Feed de notificações
  @@index([type, createdAt]) // Estatísticas por tipo
  @@index([read, createdAt]) // Cleanup de notificações antigas
  @@index([userId, type, read]) // Filtro por tipo e status
  @@index([userId, createdAt(sort: Desc)]) // Timeline do usuário
  @@map("notifications")
}

model BlockedUser {
  id         String   @id @default(uuid())
  userId     String
  blockedId  String
  reason     String?  @db.Text
  createdAt  DateTime @default(now())
  
  user       User     @relation("BlockingUser", fields: [userId], references: [id], onDelete: Cascade)
  blocked    User     @relation("BlockedUser", fields: [blockedId], references: [id], onDelete: Cascade)
  
  @@unique([userId, blockedId]) // Constraint única
  @@index([userId]) // Bloqueados pelo usuário
  @@index([blockedId]) // Usuários que bloquearam este
  @@index([userId, createdAt(sort: Desc)]) // Bloqueios recentes
  @@index([createdAt]) // Cleanup de bloqueios antigos
  @@map("blocked_users")
}

model Friendship {
  id         String           @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  sender   User @relation("FriendshipSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("FriendshipReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId]) // Constraint única
  @@index([senderId]) // Amigos enviados
  @@index([receiverId]) // Amigos recebidos
  @@index([status]) // Por status
  @@index([senderId, status]) // Amigos ativos do usuário
  @@index([receiverId, status]) // Solicitações recebidas por status
  @@index([status, createdAt]) // Solicitações pendentes por data
  @@index([senderId, receiverId, status]) // Verificação rápida de amizade
  @@index([status, updatedAt(sort: Desc)]) // Últimas atualizações
  @@map("friendships")
}


enum UserStatus {
  ONLINE
  IDLE
  DO_NOT_DISTURB
  OFFLINE
}

enum RoomRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

enum NotificationType {
  MESSAGE
  MENTION
  REPLY
  ROOM_INVITE
  FRIEND_REQUEST
  SYSTEM
}

enum Theme {
  LIGHT
  DARK
  AUTO
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}